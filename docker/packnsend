#!/bin/sh

ROOT_DIRECTORY=$(git rev-parse --show-toplevel)
WORK_DIRECTORY=".`pwd | sed -e s%$ROOT_DIRECTORY%%`"

DOGESTRY_BUCKET=s3://nr-docker-images-dev/?region=us-west-2
DOGESTRY_IMG_PATH=datanerd.us/python_agent

TEST_IMAGE_NAME=python-base

TMPDIR=${TMPDIR:-/tmp}

IMAGE_ID=""
CONTAINER_ID=""

APP_SERVICE_IMAGES="
    memcached \
    gearmand \
    postgresql \
    mysql \
    devpi \
    mongodb \
    redis \
    elasticsearch \
    solr4
    "

ALL_IMAGES="python-base $APP_SERVICE_IMAGES"

cleanup_containers()
{
    # Remove any docker containers/images and the working directory
    # where we exported the git repository for use in creating the
    # docker image.

    echo "Removing test container."

    test -n "$CONTAINER_ID" && docker rm --volumes $CONTAINER_ID

    echo "Removing test image."

    test -n "$IMAGE_ID" && docker rmi $IMAGE_ID

    echo "Removing data directory."

    rm -r $DATA_DIRECTORY
}

trap "cleanup_containers && exit 255" INT QUIT TERM

create_work_directory()
{
    # Create the work directory where all the files to be included in
    # the docker image will be placed.

    echo "Creating data directory."

    DATA_DIRECTORY=`mktemp -d $TMPDIR/packnsend.XXXXXXXX`

    echo "Data directory: $DATA_DIRECTORY"
}

export_git_repository()
{
    # We need to be in the root directory of the repository workarea for
    # 'git checkout-index' to include everything in the package By using
    # 'git checkout-index' rather than 'git archive' then we can also
    # include anything staged in the git index.

    echo "Exporting local git workarea."

    (cd $ROOT_DIRECTORY; git checkout-index --prefix=$DATA_DIRECTORY/ -a)
}

create_remote_launchers()
{
    # Create the remote launcher scripts to be included in docker image
    # containing the code to be tested.
    #
    # XXX Still cannot seem to copy back files from /data of container
    # after finished but can copy from /tmp. Can't even symlink or hard
    # link file from /data into /tmp to allow it to be copied. So make
    # an actual copy of the log file output into /tmp so it can be
    # copied back when done.

    echo "Creating remote launcher scripts."

    cat > $DATA_DIRECTORY/packnsend-remote << EOF
#!/bin/sh
. /data/docker/environ
"\$@" > /data/packnsend.log 2>&1
STATUS=\$?
cp /data/packnsend.log /tmp/packnsend.log
exit \`expr \$STATUS\`
EOF

    cat > $DATA_DIRECTORY/packnsend-bash << EOF
#!/bin/sh
. /data/docker/environ
exec bash
EOF

    # Shouldn't strictly need to do this as all files add to the image
    # by docker will have execute permissions anyway.

    chmod +x $DATA_DIRECTORY/packnsend-remote
    chmod +x $DATA_DIRECTORY/packnsend-bash
}

create_docker_file()
{
    # Create the Dockerfile used to create our image which contains the
    # code to be tested and our remote launcher script.

    echo "Creating Dockerfile for test image."

    cat > $DATA_DIRECTORY/Dockerfile << EOF
FROM $TEST_IMAGE_NAME
ADD . /data
RUN chown -R guest.users /data
RUN chmod 0755 /data
USER guest
ENV HOME /home/guest
VOLUME /data
EOF
}

create_docker_test_image()
{
    # Build the docker image containing the code to be tested.

    echo "Building test image."

    DATA_IMAGE_NAME="packnsend-`date '+%Y%m%d%H%M%S'`-$$"
    (cd $DATA_DIRECTORY && docker build --rm -t $DATA_IMAGE_NAME .)
    IMAGE_ID=$(docker inspect --format='{{.Id}}' $DATA_IMAGE_NAME)
}

set_docker_env_vars()
{
    # Read selected env vars from the current environment
    # in order to pass them to the docker run commands.

    # Env vars looked for:
    #       NEW_RELIC_STARTUP_TIMEOUT
    #       NEW_RELIC_SHUTDOWN_TIMEOUT
    #       NEW_RELIC_FAKE_COLLECTOR
    #       NEW_RELIC_PROXY_SCHEME
    #       NEW_RELIC_PROXY_HOST
    #       NEW_RELIC_PROXY_PORT
    #       NEW_RELIC_PROXY_USER
    #       NEW_RELIC_PROXY_PASS
    #       NEW_RELIC_DEVELOPER_MODE

    DOCKER_ENV_VARS=""

    if test -n "$NEW_RELIC_STARTUP_TIMEOUT"
    then
        KEY_VAL="NEW_RELIC_STARTUP_TIMEOUT=$NEW_RELIC_STARTUP_TIMEOUT"
        DOCKER_ENV_VARS="$DOCKER_ENV_VARS -e $KEY_VAL"
    fi

    if test -n "$NEW_RELIC_SHUTDOWN_TIMEOUT"
    then
        KEY_VAL="NEW_RELIC_SHUTDOWN_TIMEOUT=$NEW_RELIC_SHUTDOWN_TIMEOUT"
        DOCKER_ENV_VARS="$DOCKER_ENV_VARS -e $KEY_VAL"
    fi

    if test -n "$NEW_RELIC_FAKE_COLLECTOR"
    then
        KEY_VAL="NEW_RELIC_FAKE_COLLECTOR=$NEW_RELIC_FAKE_COLLECTOR"
        DOCKER_ENV_VARS="$DOCKER_ENV_VARS -e $KEY_VAL"
    fi

    if test -n "$NEW_RELIC_DEVELOPER_MODE"
    then
        KEY_VAL="NEW_RELIC_DEVELOPER_MODE=$NEW_RELIC_DEVELOPER_MODE"
        DOCKER_ENV_VARS="$DOCKER_ENV_VARS -e $KEY_VAL"
    fi

    if test -n "$NEW_RELIC_PROXY_SCHEME"
    then
        KEY_VAL="NEW_RELIC_PROXY_SCHEME=$NEW_RELIC_PROXY_SCHEME"
        DOCKER_ENV_VARS="$DOCKER_ENV_VARS -e $KEY_VAL"
    fi

    if test -n "$NEW_RELIC_PROXY_HOST"
    then
        KEY_VAL="NEW_RELIC_PROXY_HOST=$NEW_RELIC_PROXY_HOST"
        DOCKER_ENV_VARS="$DOCKER_ENV_VARS -e $KEY_VAL"
    fi

    if test -n "$NEW_RELIC_PROXY_PORT"
    then
        KEY_VAL="NEW_RELIC_PROXY_PORT=$NEW_RELIC_PROXY_PORT"
        DOCKER_ENV_VARS="$DOCKER_ENV_VARS -e $KEY_VAL"
    fi

    if test -n "$NEW_RELIC_PROXY_USER"
    then
        KEY_VAL="NEW_RELIC_PROXY_USER=$NEW_RELIC_PROXY_USER"
        DOCKER_ENV_VARS="$DOCKER_ENV_VARS -e $KEY_VAL"
    fi
    if test -n "$NEW_RELIC_PROXY_PASS"
    then
        KEY_VAL="NEW_RELIC_PROXY_PASS=$NEW_RELIC_PROXY_PASS"
        DOCKER_ENV_VARS="$DOCKER_ENV_VARS -e $KEY_VAL"
    fi
}

set_docker_extra_args()
{
    # Set DOCKER_EXTRA_ARGS to contain a string of extra arguments that
    # will be passed to the docker run command.

    DOCKER_EXTRA_ARGS=""

    set_docker_env_vars

    if test -n "$DOCKER_ENV_VARS"
    then
        DOCKER_EXTRA_ARGS="$DOCKER_EXTRA_ARGS $DOCKER_ENV_VARS"
    fi
}

launch_remote_command()
{
    # Launch the remote command, wait for it to complete and display
    # the output.

    echo "Setting extra arguments to pass to docker run command."
    set_docker_extra_args

    echo "DOCKER_EXTRA_ARGS:$DOCKER_EXTRA_ARGS"
    echo

    INTERACTIVE=""

    while test "$#" -ne 0
    do
        case $1 in
            -i)
                INTERACTIVE=1
                shift
                ;;
            *)
                break
                ;;
        esac
    done

    echo "Starting test container and running command."
    echo "Command: $@"

    CONTAINER_ID=$(docker run -d --name $DATA_IMAGE_NAME \
        $DOCKER_EXTRA_ARGS \
        -w /data/$WORK_DIRECTORY \
        --link packnsend-gearmand:gearmand \
        --link packnsend-memcached:memcached \
        --link packnsend-postgresql:postgresql \
        --link packnsend-mysql:mysql \
        --link packnsend-devpi:devpi \
        --link packnsend-mongodb:mongodb \
        --link packnsend-redis:redis \
        --link packnsend-elasticsearch:elasticsearch \
        --link packnsend-solr4:solr4 \
        $DATA_IMAGE_NAME /data/packnsend-remote "$@")

    STATUS=$(time docker wait $CONTAINER_ID)

    echo
    echo "Copying back command output."

    docker cp $CONTAINER_ID:/tmp/packnsend.log $DATA_DIRECTORY

    echo "Command output:"
    echo

    cat $DATA_DIRECTORY/packnsend.log

    echo

    if test -n "$INTERACTIVE"
    then
        echo "Starting interactive debug shell."
        echo

        docker run -t -i --rm -u guest --volumes-from $CONTAINER_ID \
            $DOCKER_EXTRA_ARGS \
            -w /data/$WORK_DIRECTORY \
            --link packnsend-gearmand:gearmand \
            --link packnsend-memcached:memcached \
            --link packnsend-postgresql:postgresql \
            --link packnsend-mysql:mysql \
            --link packnsend-devpi:devpi \
            --link packnsend-mongodb:mongodb \
            --link packnsend-redis:redis \
            --link packnsend-elasticsearch:elasticsearch \
            --link packnsend-solr4:solr4 \
            $TEST_IMAGE_NAME /data/packnsend-bash
    fi
}

launch_remote_shell()
{
    # Launch a remote shell in the container without actually running
    # and command.

    echo "Setting extra vars to pass to test container."
    set_docker_extra_args

    echo "DOCKER_EXTRA_ARGS:$DOCKER_EXTRA_ARGS"
    echo

    echo "Starting test container and running interactive shell."
    echo

    docker run -t -i --rm --name $DATA_IMAGE_NAME \
        $DOCKER_EXTRA_ARGS \
        -w /data/$WORK_DIRECTORY \
        --link packnsend-gearmand:gearmand \
        --link packnsend-memcached:memcached \
        --link packnsend-postgresql:postgresql \
        --link packnsend-mysql:mysql \
        --link packnsend-devpi:devpi \
        --link packnsend-mongodb:mongodb \
        --link packnsend-redis:redis \
        --link packnsend-elasticsearch:elasticsearch \
        --link packnsend-solr4:solr4 \
        $DATA_IMAGE_NAME /data/packnsend-bash
}

create_docker_base_images()
{
    IMAGE_LIST=${@:-$ALL_IMAGES}
    IMAGE_LIST=$(echo $IMAGE_LIST | sed 's/ \+/ /g')

    echo "Creating docker base images."
    echo "$IMAGE_LIST"

    for IMG in $IMAGE_LIST
    do
        echo
        echo "Create image: $IMG"
        echo

        (cd $ROOT_DIRECTORY; docker build --rm -t $IMG docker/$IMG)

    done
}

create_docker_base_images_nocache()
{
    IMAGE_LIST=${@:-$ALL_IMAGES}
    IMAGE_LIST=$(echo $IMAGE_LIST | sed 's/ \+/ /g')

    echo "Creating docker base images, no cache."
    echo "$IMAGE_LIST"

    for IMG in $IMAGE_LIST
    do
        echo
        echo "Create image: $IMG"
        echo

        (cd $ROOT_DIRECTORY; docker build --no-cache --rm -t $IMG docker/$IMG)

    done
}

push_docker_base_images()
{
    IMAGE_LIST=${@:-$ALL_IMAGES}
    IMAGE_LIST=$(echo $IMAGE_LIST | sed 's/ \+/ /g')

    echo "Push docker base images."
    echo "$IMAGE_LIST"

    for IMG in $IMAGE_LIST
    do

        echo
        echo "Push image: $IMG"
        echo

        docker tag $IMG $DOGESTRY_IMG_PATH/$IMG
        dogestry push $DOGESTRY_BUCKET $DOGESTRY_IMG_PATH/$IMG

    done
}

pull_docker_base_images()
{
    IMAGE_LIST=${@:-$ALL_IMAGES}
    IMAGE_LIST=$(echo $IMAGE_LIST | sed 's/ \+/ /g')

    echo "Pull docker base images."
    echo "$IMAGE_LIST"

    for IMG in $IMAGE_LIST
    do

        echo
        echo "Pull image: $IMG"
        echo

        dogestry -disable-checks pull $DOGESTRY_BUCKET $DOGESTRY_IMG_PATH/$IMG
        docker inspect $IMG > /dev/null 2>&1 && docker rmi $IMG
        docker tag $DOGESTRY_IMG_PATH/$IMG $IMG || exit 1

    done
}

start_application_services()
{
    IMAGE_LIST=${@:-$APP_SERVICE_IMAGES}
    IMAGE_LIST=$(echo $IMAGE_LIST | sed 's/ \+/ /g')

    echo
    echo "Start application services."

    for IMG in $IMAGE_LIST
    do

        echo
        echo "Start: $IMG"

        # Is container already running?
        DOCKER_OUTPUT=$(docker ps) || exit 1
        RUNNING_ID=$(echo "$DOCKER_OUTPUT" | grep packnsend-$IMG | awk '{print $1}')

        if test -n "$RUNNING_ID"
        then
            echo "$RUNNING_ID is already running."
            continue
        fi

        # Is container in stopped state?
        DOCKER_OUTPUT=$(docker ps -a) || exit 1
        STOPPED_ID=$(echo "$DOCKER_OUTPUT" | grep packnsend-$IMG | awk '{print $1}')

        if test -n "$STOPPED_ID"
        then
            echo "$STOPPED_ID was stopped. Now restarting."
            docker start packnsend-$IMG || exit 1
            continue
        fi

        docker run -d --name packnsend-$IMG $IMG || exit 1

    done

    DOCKER_OUTPUT=""
    RUNNING_ID=""
    STOPPED_ID=""
}

stop_application_services()
{
    IMAGE_LIST=${@:-$APP_SERVICE_IMAGES}
    IMAGE_LIST=$(echo $IMAGE_LIST | sed 's/ \+/ /g')

    echo
    echo "Stop application services."

    for IMG in $IMAGE_LIST
    do
        echo
        echo "packnsend-$IMG"

        DOCKER_OUTPUT=$(docker ps -a) || exit 1
        SERVICE_ID=$(echo "$DOCKER_OUTPUT" | grep packnsend-$IMG | awk '{print $1}')
        test -n "$SERVICE_ID" && echo "$SERVICE_ID"

        if test -n "$SERVICE_ID"
        then
            docker stop -t=0 "$SERVICE_ID" > /dev/null || exit 1
            docker kill "$SERVICE_ID" > /dev/null || exit 1
            docker rm "$SERVICE_ID" > /dev/null || exit 1
        fi

    done

    DOCKER_OUTPUT=""
    SERVICE_ID=""
}

delete_docker_base_images()
{
    IMAGE_LIST=${@:-$ALL_IMAGES}

    echo "Removing docker base images."
    echo "$IMAGE_LIST"

    for IMG in $IMAGE_LIST
    do
        echo
        echo "Remove image: $IMG"
        echo

        docker rmi $IMG

    done
}

print_usage()
{
    echo
    echo "`basename $0`: COMMAND [arg...]"
    echo
    echo "Run Commands:"
    echo "    run            Run command on test container."
    echo "    run -i         Run command interactively."
    echo "    shell          Launch a shell on test container."
    echo
    echo "Management Commands:"
    echo
    echo "To operate on a subset of images/containers, pass a list"
    echo "of space-separated names of images as arguments to the"
    echo "management commands. Otherwise, management commands operate"
    echo "on all images/containers."
    echo
    echo "    init               Pull images, if authorized, else build."
    echo "    build              Build base images."
    echo "    build_nocache      Build base images, no cache."
    echo "    push               Push base images."
    echo "    pull               Pull base images."
    echo "    start              Start base containers."
    echo "    stop               Stop base containers."
    echo "    restart            Stop, then start base containers."
    echo "    cleanup            Delete base images."
    echo
    echo "Help commands:"
    echo "    list           List base images."
    echo "    help           Print help message."
    echo
}

list_docker_base_images()
{
    echo
    echo "Available base images:"
    echo

    for IMG in $ALL_IMAGES
    do
        echo "    $IMG"
    done
}

if test $# -lt 1
then
    print_usage
    exit 1
fi

COMMAND=$1

shift

case "$COMMAND" in
    run)
        create_work_directory
        export_git_repository
        create_remote_launchers
        create_docker_file
        create_docker_test_image
        launch_remote_command "$@"
        cleanup_containers
        exit `expr $STATUS`
        ;;

    shell)
        create_work_directory
        export_git_repository
        create_remote_launchers
        create_docker_file
        create_docker_test_image
        launch_remote_shell
        cleanup_containers
        exit 0
        ;;

    init)
        pull_docker_base_images "$@"
        ;;

    build)
        create_docker_base_images "$@"
        ;;

    build_nocache)
        create_docker_base_images_nocache "$@"
        ;;

    push)
        push_docker_base_images "$@"
        ;;

    pull)
        pull_docker_base_images "$@"
        ;;

    start)
        start_application_services "$@"
        ;;

    stop)
        stop_application_services "$@"
        ;;

    restart)
        stop_application_services "$@"
        start_application_services "$@"
        ;;

    cleanup)
        delete_docker_base_images "$@"
        ;;

    list)
        list_docker_base_images
        ;;

    help)
        print_usage
        ;;

    *)
        print_usage
        exit 1
        ;;
esac
