Using docker for testing
========================

This file describes how to perform testing of the agent using docker
and a test runner/management script called "packnsend".

Initial setup of docker
-----------------------

You need to have a docker service running somewhere, if you are on
a Mac you can install
[Docker for Mac](https://docs.docker.com/v17.12/docker-for-mac/install/).
If this is not on your local host, then you need to at least have the docker
client available in your PATH and the 'DOCKER_HOST' environment variable set
to the name of the docker service host.

Using Packnsend
===============

The "packnsend" script simplifies the management of a set of base docker
image and the running of tests in a docker container. The workflow consists
of:

1. Pull or build the base images.
2. Start the application services in separate docker containers.
3. Run the test in a test container that links to the application services.
4. Stop the application services.

Packnsend commands
------------------

Packnsend comes with a help command:

    $ packnsend help

    packnsend: COMMAND [arg...]

    Run Commands:
        run      Run command on test container.
        run -i   Run command interactively
        shell    Launch a shell on test container.

    Management Commands:

    To operate on a subset of images/containers, pass a list of
    space-separated names of images to the management commands.
    Otherwise, they operate on all images/containers.

        init     Pull images, if authorized, else build.
        build    Build base images.
        push     Push base images.
        pull     Pull base images.
        start    Start base containers.
        stop     Stop base containers.
        cleanup  Delete base images.

    Help commands:
        list     List available base images.
        help     Print help message.

The various packnsend commands are described in more detail below.

Setting up base images
----------------------

To setup the required base images needed for testing run 'packnsend' with
the 'init' command:

    packnsend init

If you are on the PDX VPN, this command will pull the images from the
private docker image repository hosted in Container Fabric.
Otherwise, this command will build the images from the Dockerfiles.

In either case, this will take awhile.

Building the images
-------------------

If you know you want to build the images from the Dockerfiles, and not pull
them, you can run `packnsend` with the `build` command:

    packnsend build

The build command accepts a image names as arguments, if you want to build a
subset of images:

    packnsend build memcached mysql

Pulling the images from Container Fabric
----------------------------------------

To pull all of the images from Container Fabric, use the `pull` command:

    packnsend pull

Pulling a subset of images is possible:

    packnsend pull squid

Pulling the images is typically faster than building them.

Pushing the images to Container Fabric
--------------------------------------

To update the images hosted in the Container Fabric repository, use the `push` command.
This command will push all images to Container Fabric:

    packnsend push

To push a subset of images:

    packnsend push python-base postgresql

Running a test in docker
------------------------

Before running any tests, you first need to start up any required
application services. This is done by running:

    packnsend start

To run a command in the test docker instance you can use the 'run' command
with 'packnsend'.

    packnsend run tox -c tests/datastore_sqlite/tox.ini

Note that right now the output isn't streamed and will only be shown once
the command has completed. For some tests this can take up to 5 minutes.
Even more if you ran './tests.sh' from top level directory of the agent
repository.

You can actually supply any UNIX command after 'run'. The result will be
that the local HEAD of the git repository contents, including anything that
you have staged in the git index, will be copied up to the docker instance
and then the command run.

In other words, you don't have to commit changes, but you do need to have
staged them in the git index. This allows you to indicate what are the
changes without commit so commit history not polluted while iterating over
changes during testing.

The command when run will be from the same relative directory within the
source code as you were in when you can the 'packnsend' command.

Passing environment variables
-----------------------------

Certain variables that are present in your current environment will
be passed as environment variables to the test docker instance. This
allows you to configure selected settings when you run a test.

For example, to change `settings.startup_timeout`, you should set the
`NEW_RELIC_STARTUP_TIMEOUT` environment variable:

    export NEW_RELIC_STARTUP_TIMEOUT=60
    packnsend run tox -c tests/database_psycopg2/tox.ini

Only the following environment variables are passed from your environment
to the test docker instance:

    NEW_RELIC_STARTUP_TIMEOUT
    NEW_RELIC_SHUTDOWN_TIMEOUT
    NEW_RELIC_FAKE_COLLECTOR
    NEW_RELIC_PROXY_HOST
    NEW_RELIC_PROXY_PORT
    NEW_RELIC_PROXY_USER
    NEW_RELIC_PROXY_PASS

Launching a shell in docker
---------------------------

There are two different options for launching a shell in a test docker
instance.

1. Connect after a test has run.

For instance, if a test has been failing, you can launch into a shell
with the results of running the test using the '-i' option.

    packnsend run -i tox -c tests/datastore_sqlite/tox.ini

2. Connect without running any commands.

If you don't want to run a test and simply want a shell, use:

    packnsend shell

In all cases when a command or shell is run up in the test container, it
will be done as the UNIX user 'guest'.

Cleaning up containers
----------------------

After any command, the container and any temporary images will be cleaned
up and deleted automatically, so that the docker service doesn't fill up
with garbage.

Stopping application services
-----------------------------

When done testing, the application services can be shutdown by running:

    packnsend stop

To stop only some of the services, pass the image names to the stop command:

    packnsend stop redis mongodb

Updating images
---------------

If the base images have been changed, the way to update them is to remove the
old ones, and then create them anew.

Remove base images:

    packnsend cleanup

Or, Remove a subset of images:

    packnsend cleanup squid

Create base images:

    packnsend init

Listing images
--------------

The list command shows all base images on which packnsend can operate.

It is *NOT* a list of images that exist in the local docker repository.
Instead, it is a list of all images that packnsend knows how to pull, or
build, or push, etc.

    packnsend list
