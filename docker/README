Using docker for testing
========================

This file describes how to perform testing of the agent using docker.

Initial setup of docker
-----------------------

You need to have a docker service running somewhere. If this is not on your
local host, then you need to at least have the docker client available in
your PATH and the 'DOCKER_HOST' environment variable set to the name of the
docker service host.

Running docker on MacOS X
-------------------------

The docker service cannot be run natively on MacOS X. Instead you need
to run it under VirtualBox. Make sure you have up to date VirtualBox
installed.

The procedure documented on docker.io for actually now running docker also
involves using Vagrant, but there is a simpler way using a tool called
boot2docker.

The boot2docker project can be found at:

* https://github.com/steeve/boot2docker

Skip the initial instructions and follow the instructions for MacOS X in
that page at, but first read the note below.

* https://github.com/steeve/boot2docker#init-script-osx-and-linux

Note that if you are using a New Relic managed MacBook, then CrashPlan
runs on the same port as the docker service wants to use. As a result you
will need to override what port the docker service is exported on from
the virtual machine.

To do this, before even running boot2docker, you need to create in your
home directory a subdirectory called '.boot2docker' and create within that
the file 'profile'. In that file add:

    DOCKER_PORT=14243

    VM_DISK=$HOME/.boot2docker/boot2docker.vmdk
    BOOT2DOCKER_ISO=$HOME/.boot2docker/boot2docker.iso

Even if not needing to override the docker service port, set the locations
for the boot2docker VM image and ISO so they are located in this directory
also.

Now follow the steps to create the boot2docker instance. Copying the
boot2docker script into your PATH somewhere. A good idea might be to
actually copy it into $HOME/.boot2docker as well and then add:

    export PATH="$HOME/.boot2docker:$PATH"

into your .bash_profile script.

Once you have boot2docker running you need the MacOS X binary for the docker
client. You can download it from the docker site, ensuring you make it
executable.

    wget https://get.docker.io/builds/Darwin/x86_64/docker-latest -O docker
    chmod +x docker

This also can be placed into $HOME/.boot2docker if you added that directory
to PATH.

Before using it or the 'packnsend' script, you need to set and export
DOCKER_HOST environment variable to 'localhost'.

    export DOCKER_HOST="localhost"

If you had to override the docker service port however, include the port
as part of the DOCKER_HOST environment variable:

    export DOCKER_HOST="localhost:14243"

Set this permanently in your .bash_profile as well.

To test it works run:

    docker version

Setting up base images
----------------------

To setup the required base images needed for testing run 'packnsend' with
the 'init' command:

    packnsend init

This will take a while.

Running a test in docker
------------------------

Before running any tests, you first need to start up any required
application services. This is done by running:

    packnsend start

To run a command in the test docker instance you can use the 'run' command
with 'packnsend'.

    packnsend run tox -c tests/database_sqlite/tox.ini

Note that right now the output isn't streamed and will only be shown once
the command has completed. For some tests this can take up to 5 minutes.
Even more if you ran './tests.sh' from top level directory of the agent
repository.

You can actually supply any UNIX command after 'run'. The result will be
that the local HEAD of the git repository contents, including anything that
you have staged in the git index, will be copied up to the docker instance
and then the command run.

In other words, you don't have to commit changes, but you do need to have
staged them in the git index. This allows you to indicate what are the
changes without commit so commit history not polluted while iterating over
changes during testing.

The command when run will be from the same relative directory within the
source code as you were in when you can the 'packnsend' command.

Passing environment variables
-----------------------------

Certain variables that are present in your current environment will
be passed as environment variables to the test docker instance. This
allows you to configure selected settings when you run a test.

For example, to change `settings.startup_timeout`, you should set the
`NEW_RELIC_STARTUP_TIMEOUT` environment variable:

    export NEW_RELIC_STARTUP_TIMEOUT=60
    packnsend run tox -c tests/database_psycopg2/tox.ini

Only the following environment variables are passed from your environment
to the test docker instance:

    NEW_RELIC_STARTUP_TIMEOUT
    NEW_RELIC_SHUTDOWN_TIMEOUT
    NEW_RELIC_FAKE_COLLECTOR

Launching a shell in docker
---------------------------

There are two different options for launching a shell in a test docker
instance.

1. Connect after a test has run.

For instance, if a test has been failing, you can launch into a shell
with the results of running the test using the '-i' option.

    packnsend run -i tox -c tests/database_sqlite/tox.ini

2. Connect without running any commands.

If you don't want to run a test and simply want a shell, use:

    packnsend shell

In all cases when a command or shell is run up in the test container, it
will be done as the UNIX user 'guest'.

Cleaning up containers
----------------------

After any command, the container and any temporary images will be cleaned
up and deleted automatically, so that the docker service doesn't fill up
with garbage.

Stopping application services
-----------------------------

When done testing, the application services can be shutdown by running:

    packnsend stop

Updating images
---------------

If the base images have been changed, the way to update them is to remove the old ones,
and then create them anew.

Remove base images:

    packnsend cleanup

Create base images:

    packnsend init
