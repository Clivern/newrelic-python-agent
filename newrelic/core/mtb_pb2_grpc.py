# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import newrelic.core.mtb_pb2 as mtb__pb2


class IngestServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.RecordSpan = channel.stream_stream(
        '/com.newrelic.trace.v1.IngestService/RecordSpan',
        request_serializer=mtb__pb2.Span.SerializeToString,
        response_deserializer=mtb__pb2.RecordStatus.FromString,
        )


class IngestServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def RecordSpan(self, request_iterator, context):
    """Accepts a stream of Span messages, and returns an irregular stream of
    RecordStatus messages.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_IngestServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'RecordSpan': grpc.stream_stream_rpc_method_handler(
          servicer.RecordSpan,
          request_deserializer=mtb__pb2.Span.FromString,
          response_serializer=mtb__pb2.RecordStatus.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'com.newrelic.trace.v1.IngestService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
