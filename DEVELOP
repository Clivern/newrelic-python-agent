Local Development
=================

Now that you have checked out the Python agent package, you are going to
need a few tools to be able to build it if developing on your local
machine. These are:

1. A complete installation of Python including sqlite and zlib support.
   Python 2.6 or 2.7 is recommended. Any code changes made to the Python
   agent must be compatible with Python 2.6, 2.7 and 3.3+.

2. The 'virtualenv' package for Python. This should be installed into
   the Python installation being used. It is required to setup a Python
   virtual environment when running unit tests.

If running Ubuntu, to install the additional packages you need you should
run the following apt-get commands.

   sudo apt-get install g++
   sudo apt-get install sqlite3 libsqlite3-dev
   sudo apt-get install zlib1g-dev

For MacOS X you simply need to install XCode.

After that you can then install 'virtualenv'. The tar ball for that can
be obtained from:

    http://pypi.python.org/pypi/virtualenv

To install it, within the source code for the 'virtualenv' package run:

    python setup.py build
    sudo python setup.py install

If you want to test locally the scripts for building the Python agent for
multiple Python versions/variants and creation of the tar balls, see further
notes under following section on Hudson build boxes.


Building The Agent
==================

To build the Python agent against Python installation found in your PATH
you can run:

    ./configure
    make

To install it into the same Python installation, run:

    make install

If this is a system wide Python installation rather than a personal
installation or Python virtual environment, use 'sudo' as appropriate when
doing the install.

When finished you can clean up the directory by running:

    make clean

You can do a more complete clean of the directory by running:

    make distclean

This will remove files created from the virgin checkout. You will however
need to rerun the 'configure' command.

Note that if you need to use an alternate Python installation than the one
found in your PATH, then you can use the '--with-python' option to the
'configure' command. For example:

    ./configure --with-python=/usr/local/python-2.7/bin/python

There is also the '--with-virtualenv' option to indicate where the
'virtualenv' program got installed. Normally this will be in same 'bin'
directory as the 'python' executable. As such, if '--with-python' is used
the configure script will automatically look in the same 'bin' directory
first so '--with-virtualenv' shouldn't usually be needed.


Running The Unit Tests
======================

First, install tox via pip.

To run the unit tests use the script:

    tests.sh

This uses 'tox' to coordinate testing. For each Python version available,
this will construct a Python virtual environment. The Python agent package
will be installed into that rather than into the Python install found by
the 'configure' script. This avoids polluting your main Python installation
with your development version of the Python agent just to be able to run
tests.

By default the 'tests.sh' script will currently run tests for Python 2.6
and Python 2.7. The script can also detect the presence of Python 3.3
but will not run tests by default. If you want to run tests for Python
3.3, or to be select about what Python versions to run tests for, the
identifiers for the Python versions can be passed as separate arguments.

    tests.sh py33

If you need to be able to run a specific unit test, then you can execute
'tox' directly.

    tox newrelic/api/tests/test_wsgi_applicaton.py

You will need to have 'tox' and 'pytest' installed in whatever Python
installation or virtual environment you are using when developing with the
package.

The 'tests.sh' script will be automatically run by Jenkins whenever changes
are pushed to the GIT repository.
