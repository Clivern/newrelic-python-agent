Requirements
============

Host system must have the following:

1. GCC/G++. G++ is required for doing Python build on some systems.

2. Python. Preferably Python 2.5 or later. This is only used to bootstrap the
   build process. Specifically used by 'buildout' package used to coordinate
   the builds.

3. The sqlite3 and sqlite3-dev packages. Needed if want to run unit tests
   for the final Python agent when compiled against Python installations
   generated by this package.

4. The zlib and zlib-dev packages. Needed if want to run unit tests
   for the final Python agent when compiled against Python installations
   generated by this package.

5. GIT. Needed to check out virtualenv package from remote repository.
   Needed to create the buildout installation which coordinates the
   installation of all the different Python versions.

Additional packages that will need to be installed for particular systems
outlined below.

Unbuntu 10.4 LTS
----------------

For a fresh install of the operating system, you will need to run:

   sudo apt-get install g++
   sudo apt-get install sqlite3 libsqlite3-dev
   sudo apt-get install zlib1g-dev

MacOX X 10.6
------------

For a fresh install of the operating system, you will need to install XCode.


Installation
============

Once above requirements statisfied, to setup the Python installations
required, run the following steps.

1. Run 'configure'.

By default the target directory where Python installations will be placed
is the 'parts' subdirectory within this directory. This is okay if doing
local builds of Python agent for development, but should not be used if
wanting to install the Python installations globally for use on the Hudson
build boxes. Instead use '/usr/local/python'. This destination directory
can be specified using the '--prefix' option.

    ./configure --prefix=/usr/local/python

2. Set permissions on target installation directory.

The result of running the configure script will be a 'Makefile' which make
can be run against. The make process does the build and install as a
combined step. This means that if installing to the global location you
should ideally pre create the destination directory '/usr/local/python' in
advance and change ownership and group to be such that the user this build
is being done as can write to the directory. Otherwise the build/install
process will need to be run as 'root'.

Thus, if doing the build of the Python installations as 'hudson' user,
setup the global location with it as the owner.

    sudo mkdir /usr/local/python
    sudo chown hudson /usr/local/python

3. Run the build/install process.

To perform the build run:

    make

This one command will automatically download virtualenv source code and
setup a Python environment into which a buildout system will be installed
to coordinate the installation. That will then download the required source
code for all Python versions to be installed, thence build and install them.

The result should be that under the '/usr/local/python' directory there
will be a subdirectory corresponding to each Python version/variant. There
will also be an empty 'buildout' directory left over as an artifact of
buildout managing being used to manage the installation.

4. To cleanup after a build:

    make clean

This will remove the local 'parts' directory if no global location had been
specified for installation. Thus would remove any local Python installations.
It will not remove the global location if '--prefix' option were used.

This command will not remove the cache directories for where source code
has been downloaded to. If a full clean is required run:

    make distclean


New Platforms
-------------

Buildout is used for coordinating installation of the different Python
versions. This is controlled through separate buildout configuration files
for each target platform. These are the files contained in this directory
called:

    i386-apple-darwin.cfg
    i686-pc-linux-gnu.cfg
    x86_64-unknown-linux-gnu.cfg

The name of the file is important, so if you are going to install a
configuration for a new platform you should run the following command to
work out what the filename should be.

    echo `../config.guess | sed -e "s/[0-9.]*$$//"`.cfg

The 'config.guess' script is the script which typically is supplied with
any autoconf generated build system which needs to uniquely identify the
different target systems. It is used here because it is better than any
other system around for coming up with such a unique name. Note that we do
however drop any operating system version number off the end of the string
otherwise different kernel versions can result in different strings on
some platforms and we don't really want that.

Once you know the file name, copy one of the existing configuration files,
those for Linux are probably best as a starting point, and modify the options
as appropriate.

The 'parts' variant within the 'buildout' section specifies the different
rule sets for each Python version or variant to be installed. For example:

    parts = python-2.4-ucs2-all
            python-2.4-ucs4-all
            python-2.5-ucs2-all
            python-2.5-ucs4-all
            python-2.6-ucs2-all
            python-2.6-ucs4-all
            python-2.7-ucs2-all
            python-2.7-ucs4-all

The rules for each obviously then need to exist. These would be of the form:

    [python-2.4-ucs2]
    recipe = zc.recipe.cmmi
    url = http://www.python.org/ftp/python/2.4.6/Python-2.4.6.tgz
    bindir = ${buildout:parts-directory}/python-2.4-ucs2/bin
    extra_options = --with-threads --enable-unicode=ucs2

    [python-2.4-ucs2-virtualenv]
    recipe = plone.recipe.command
    command = (cd virtualenv-src;
               ${python-2.4-ucs2:bindir}/python setup.py install)

    [python-2.4-ucs2-all]
    recipe =
    parts = ${python-2.4-ucs2:recipe}
            ${python-2.4-ucs2-virtualenv:recipe}

The 'url' attribute is what specifies where the source code is obtained from
for that Python version. The 'extra_options' is what options should be used
to the 'configure' script in the Python source code when it is being built
and installed. You don't need to specify a '--prefix' option as 'buildout'
will do that automatically.

For 'extra_options', threading should always be enabled. It is not important
that Python isn't installed with shared library support as we are only
compiling against the Python installation and not then using it in a system
where a shared library is required. The Unicode setting needs to match that
for variant being installed.
